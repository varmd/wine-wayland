--- a/programs/winecfg/audio.c
+++ b/programs/winecfg/audio.c
@@ -52,6 +52,8 @@

 WINE_DEFAULT_DEBUG_CHANNEL(winecfg);

+static void apply_speaker_configs(void);
+
 struct DeviceInfo {
     WCHAR *id;
     PROPVARIANT name;
@@ -367,6 +369,12 @@
         swprintf(display_str, ARRAY_SIZE(display_str), format_str, disabled_str);

     SetDlgItemTextW(hDlg, IDC_AUDIO_DRIVER, display_str);
+
+    if(is_audio_exit_mode) {
+      apply_speaker_configs();
+      apply();
+      ExitProcess(1);
+    }
 }

 static void set_reg_device(HWND hDlg, int dlgitem, const WCHAR *key_name)
@@ -437,11 +445,16 @@

         pv.ulVal = speaker_configs[render_devs[i].speaker_config].speaker_mask;

+//Causes no sound
+/*
+
         hr = IPropertyStore_SetValue(ps, &PKEY_AudioEndpoint_PhysicalSpeakers, &pv);

         if (FAILED(hr))
             WARN("IPropertyStore_SetValue failed for %s: 0x%08lx\n", wine_dbgstr_w(render_devs[i].id), hr);

+*/
+
         IPropertyStore_Release(ps);
         IMMDevice_Release(dev);
     }
--- a/programs/winecfg/main.c
+++ b/programs/winecfg/main.c
@@ -34,6 +34,8 @@

 WINE_DEFAULT_DEBUG_CHANNEL(winecfg);

+int is_audio_exit_mode = 0;
+
 static INT CALLBACK
 PropSheetCallback (HWND hWnd, UINT uMsg, LPARAM lParam)
 {
@@ -68,13 +70,13 @@
      * for the property sheet
      */
     psp[pg].dwSize = sizeof (PROPSHEETPAGEW);
     psp[pg].dwFlags = PSP_USETITLE;
     psp[pg].hInstance = hInstance;
-    psp[pg].u.pszTemplate = MAKEINTRESOURCEW (IDD_APPCFG);
+    psp[pg].u.pszTemplate = MAKEINTRESOURCEW (IDD_AUDIOCFG);
     psp[pg].u2.pszIcon = NULL;
-    psp[pg].pfnDlgProc = AppDlgProc;
-    psp[pg].pszTitle = load_string (IDS_TAB_APPLICATIONS);
+    psp[pg].pfnDlgProc = AudioDlgProc;
+    psp[pg].pszTitle = load_string (IDS_TAB_AUDIO);
     psp[pg].lParam = 0;
     pg++;

     /*
@@ -130,11 +130,11 @@
     psp[pg].dwSize = sizeof (PROPSHEETPAGEW);
     psp[pg].dwFlags = PSP_USETITLE;
     psp[pg].hInstance = hInstance;
-    psp[pg].u.pszTemplate = MAKEINTRESOURCEW (IDD_AUDIOCFG);
+    psp[pg].u.pszTemplate = MAKEINTRESOURCEW (IDD_APPCFG);
     psp[pg].u2.pszIcon = NULL;
-    psp[pg].pfnDlgProc = AudioDlgProc;
-    psp[pg].pszTitle =  load_string (IDS_TAB_AUDIO);
+    psp[pg].pfnDlgProc = AppDlgProc;
+    psp[pg].pszTitle =  load_string (IDS_TAB_APPLICATIONS);
     psp[pg].lParam = 0;
     pg++;

     /*
@@ -190,6 +190,13 @@
         print_current_winver();
         return 0;
     }
+    if (lpCmdLine[1] == 'a' || lpCmdLine[1] == 'A')
+    {
+
+
+        print_current_winver();
+        return -2;
+    }

     if (lpCmdLine[1] == '?')
     {
@@ -202,6 +211,7 @@
         printf("Options:\n");
         printf("  [no option] Launch the graphical version of this program.\n");
         printf("  /v          Display the current global Windows version.\n");
+        printf("  /a          Switch to audio tab and quit.\n");
         printf("  /v version  Set global Windows version to 'version'.\n");
         printf("  /?          Display this information and exit.\n\n");
         printf("Valid versions for 'version':\n\n");
@@ -259,7 +269,10 @@
     cmd_ret = ProcessCmdLine(cmdline);
     if (cmd_ret >= 0) return cmd_ret;

-    /*
+    if (cmd_ret == -2) {
+      is_audio_exit_mode = 1;
+    }
+     /*
      * The next 9 lines should be all that is needed
      * for the Wine Configuration property sheet
      */
--- a/programs/winecfg/winecfg.h
+++ b/programs/winecfg/winecfg.h
@@ -40,6 +40,8 @@

 extern WCHAR* current_app; /* NULL means editing global settings  */

+extern int is_audio_exit_mode;
+
 /* Use get_reg_key and set_reg_key to alter registry settings. The changes made through
    set_reg_key won't be committed to the registry until process_all_settings is called,
    however get_reg_key will still return accurate information.

