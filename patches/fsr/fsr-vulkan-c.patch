--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -22,6 +22,7 @@
 #endif

 #include "config.h"
+#include <math.h>
 #include <time.h>
 #include <stdlib.h>

@@ -698,6 +699,8 @@
     struct VkDevice_T *object;
     unsigned int i;
     VkResult res;
+    // Enable shaderStorageImageWriteWithoutFormat for fshack
+    VkPhysicalDeviceFeatures features = {0};

     TRACE("%p, %p, %p, %p\n", phys_dev, create_info, allocator, device);

@@ -725,6 +728,19 @@

     object->phys_dev = phys_dev;

+#if !defined(USE_STRUCT_CONVERSION) //disable for 32bit, crashes Witcher 1
+    //if (create_info_host.pEnabledFeatures) //crashes from Wine 7.21 might not be needed
+    //{
+    //    features = *create_info_host.pEnabledFeatures;
+    //    features.shaderStorageImageWriteWithoutFormat = VK_TRUE;
+    //    create_info_host.pEnabledFeatures = &features;
+    //}
+    //else if (!create_info_host.pEnabledFeatures)
+    //{
+    //    features.shaderStorageImageWriteWithoutFormat = VK_TRUE;
+    //    create_info_host.pEnabledFeatures = &features;
+    //}
+#endif
     res = wine_vk_device_convert_create_info(create_info, &create_info_host);
     if (res == VK_SUCCESS)
         res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
@@ -1470,6 +1470,7 @@
     struct wine_phys_dev *phys_dev = wine_phys_dev_from_handle(handle);
     struct wine_surface *surface = wine_surface_from_handle(surface_handle);
     VkResult res;
+    VkExtent2D user_res;

     res = phys_dev->instance->funcs.p_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(phys_dev->phys_dev,

@@ -1475,6 +1475,13 @@
     if (res == VK_SUCCESS)
         adjust_max_image_count(phys_dev, capabilities);

+    if (res == VK_SUCCESS && vk_funcs->query_fs_hack &&
+            vk_funcs->query_fs_hack(surface->driver_surface, NULL, &user_res, NULL, NULL, NULL, NULL)){
+        capabilities->currentExtent = user_res;
+        capabilities->minImageExtent = user_res;
+        capabilities->maxImageExtent = user_res;
+    }
+
     return res;
 }

@@ -1490,6 +1490,7 @@
     struct wine_surface *surface = wine_surface_from_handle(surface_info->surface);
     VkPhysicalDeviceSurfaceInfo2KHR_host host_info;
     VkResult res;
+    VkExtent2D user_res;

     host_info.sType = surface_info->sType;

@@ -1501,6 +1501,13 @@
     if (res == VK_SUCCESS)
         adjust_max_image_count(phys_dev, &capabilities->surfaceCapabilities);

+    if (res == VK_SUCCESS && vk_funcs->query_fs_hack &&
+            vk_funcs->query_fs_hack(wine_surface_from_handle(surface_info->surface)->driver_surface, NULL, &user_res, NULL, NULL, NULL, NULL)){
+        capabilities->surfaceCapabilities.currentExtent = user_res;
+        capabilities->surfaceCapabilities.minImageExtent = user_res;
+        capabilities->surfaceCapabilities.maxImageExtent = user_res;
+    }
+
     return res;
 }

@@ -1767,3 +1804,6 @@
 {
     return !!vk_funcs->p_vkGetDeviceProcAddr(device->device, name);
 }
+
+
+#include "vulkan-fsr-include.c"
\ No newline at end of file
